# -*- coding: utf-8 -*-
"""cs_aes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ov8mfWDER2hHf1XPAQqXM4DeTx0wcF7o
"""

import socket
import threading

def additive_decrypt(cipher_text, key):
    decrypted_text = ""
    for char in cipher_text:
        if char.isalpha():
            shifted = (ord(char) - ord('A') - key) % 26 + ord('A')
            decrypted_text += chr(shifted)
        else:
            decrypted_text += char
    return decrypted_text

def start_server():
    host = '127.0.0.1'
    port = 65432

    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((host, port))
    server_socket.listen(1)
    print(f"Server listening on {host}:{port}...")

    conn, addr = server_socket.accept()
    print(f"Connected by {addr}")

    # Receive the key and cipher text
    key = int(conn.recv(1024).decode())
    cipher_text = conn.recv(1024).decode()

    decrypted_message = additive_decrypt(cipher_text, key)
    print(f"Decrypted message: {decrypted_message}")

    conn.close()

# Run server in a separate thread
server_thread = threading.Thread(target=start_server)
server_thread.start()

import socket

def additive_encrypt(plain_text, key):
    cipher_text = ""
    for char in plain_text:
        if char.isalpha():
            shifted = (ord(char) - ord('A') + key) % 26 + ord('A')
            cipher_text += chr(shifted)
        else:
            cipher_text += char
    return cipher_text

def start_client():
    host = '127.0.0.1'
    port = 65432

    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect((host, port))

    key = 3  # Example shift key
    plain_text = "HELLO THIS IS A SECRET MESSAGE"
    cipher_text = additive_encrypt(plain_text, key)

    # Send the key and cipher text to the server
    client_socket.sendall(str(key).encode())
    client_socket.sendall(cipher_text.encode())

    print(f"Encrypted message sent: {cipher_text}")

    client_socket.close()

# Run client after a short delay to give server time to start
import time
time.sleep(1)
start_client()

import socket
import threading
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import padding
from cryptography.hazmat.backends import default_backend

def decrypt_text(cipher_text: bytes, iv: bytes, key: bytes) -> str:
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    decryptor = cipher.decryptor()

    padded_plain_text = decryptor.update(cipher_text) + decryptor.finalize()

    unpadder = padding.PKCS7(algorithms.AES.block_size).unpadder()
    plain_text = unpadder.update(padded_plain_text) + unpadder.finalize()

    return plain_text.decode()

def start_server():
    host = '127.0.0.1'
    port = 65432

    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((host, port))
    server_socket.listen(1)
    print(f"Server listening on {host}:{port}...")

    conn, addr = server_socket.accept()
    print(f"Connected by {addr}")

    # Receive the key, IV, and cipher text
    key = conn.recv(32)  # 32 bytes key for AES-256
    iv = conn.recv(16)   # 16 bytes IV
    cipher_text = conn.recv(1024)  # Receive the encrypted message

    decrypted_message = decrypt_text(cipher_text, iv, key)
    print(f"Decrypted message: {decrypted_message}")

    conn.close()

server_thread = threading.Thread(target = start_server)
server_thread.start()

import socket
import os
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import padding
from cryptography.hazmat.backends import default_backend

def encrypt_text(plain_text: str, key: bytes) -> (bytes, bytes):
    iv = os.urandom(16)
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    encryptor = cipher.encryptor()

    padder = padding.PKCS7(algorithms.AES.block_size).padder()
    padded_data = padder.update(plain_text.encode()) + padder.finalize()
    cipher_text = encryptor.update(padded_data) + encryptor.finalize()

    return cipher_text, iv

def start_client():
    host = '127.0.0.1'
    port = 65432

    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect((host, port))

    key = os.urandom(32)  # Generate a random 32 bytes key for AES-256
    plain_text = "This is a secret message."
    cipher_text, iv = encrypt_text(plain_text, key)

    # Send the key, IV, and cipher text to the server
    client_socket.sendall(key)
    client_socket.sendall(iv)
    client_socket.sendall(cipher_text)

    print(f"Encrypted message sent: {cipher_text}")

    client_socket.close()

start_client()



