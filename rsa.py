# -*- coding: utf-8 -*-
"""rsa.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14xLHB11SPtk4dAryl7ZYTIv4DPP09a2n
"""

import socket
import threading
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import padding
import os
import rsa

def start_server():
    host = "127.0.0.1"
    port = 65432

    public_key, priv_key = rsa.newkeys(512)

    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((host, port))
    server_socket.listen(1)
    print("Server started listening, port", port)

    conn, addr = server_socket.accept()

    conn.send(public_key.save_pkcs1())

    C = conn.recv(1024)

    decrypttext = rsa.decrypt(C, priv_key).decode()
    print("Decrypted : ",decrypttext)

    conn.close()

server_thread = threading.Thread(target=start_server)
server_thread.start()

def start_client():
    host = "127.0.0.1"
    port = 65432

    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect((host, port))

    # generate keys
    public, priv = rsa.newkeys(512)

    #public
    public_key_data = client_socket.recv(1024)
    server_public_key = rsa.PublicKey.load_pkcs1(public_key_data)

    plaintext = "HelloWorld"
    encryptedtext = rsa.encrypt(plaintext.encode(), server_public_key)
    print("Encryption : ", encryptedtext)

    client_socket.send(encryptedtext)

    client_socket.close()

start_client()